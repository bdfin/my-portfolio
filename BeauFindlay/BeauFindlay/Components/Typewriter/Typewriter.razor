@using System.Timers

@inject ITypewriterNotificationService NotificationService

@if (DisplayCursor)
{
    <span>@currentText<span class="blinking-cursor">|</span></span>
}
else
{
    <span>@currentText</span>
}

@code {
    private const int typingDelayMilliseconds = 50;
    private const int lineEndDelayMilliseconds = 1000;

    private static List<Typewriter> instances = [];
    private static Typewriter? lastTypingInstance = null;
    private string currentText = "";
    private bool isTyping = false;
    
    private bool DisplayCursor => lastTypingInstance == this;
    
    [Parameter]
    public string Text { get; set; } = "";
    
    [Parameter]
    public string? Name { get; set; }
    
    public static event Action? OnAllTypingCompleted;

    protected override void OnInitialized()
    {
        Text = Text.Trim();
        instances.Add(this);
        StartTypingIfFirst();
    }

    private void StartTypingIfFirst()
    {
        if (instances.FirstOrDefault() == this && !isTyping)
        {
            StartTyping();
        }
    }

    private void StartTyping()
    {
        isTyping = true;
        lastTypingInstance = this;
        var timer = new Timer(typingDelayMilliseconds);
        var index = 0;
        
        timer.Elapsed += (_, __) =>
        {
            if (index < Text.Length)
            {
                currentText += Text[index++];
                InvokeAsync(StateHasChanged);
            }
            else
            {
                CompleteTyping(timer);
            }
        };
        timer.Start();
    }

    private void CompleteTyping(Timer typingTimer)
    {
        typingTimer.Stop();
        
        isTyping = false;
        
        var delayTimer = new Timer(lineEndDelayMilliseconds);
        delayTimer.Elapsed += (sender, e) =>
        {
            delayTimer.Stop(); 
            delayTimer.Dispose();
            UpdateCursorVisibility();
            StartNextInstanceTyping();

            if (!string.IsNullOrWhiteSpace(Name))
            {
                NotificationService.NotifyTypingCompleted(new TypingCompletedEventArgs(Name));
            }
            
            if (!instances.Any())
            {
                OnAllTypingCompleted?.Invoke();
            }
            
            InvokeAsync(StateHasChanged);
        };
        
        delayTimer.Start(); 
    }

    private void UpdateCursorVisibility()
    {
        lastTypingInstance = instances.LastOrDefault(i => !i.isTyping);
        
        InvokeAsync(StateHasChanged);
    }

    private void StartNextInstanceTyping()
    {
        instances.Remove(this); 
        
        var nextInstance = instances.FirstOrDefault();
        
        nextInstance?.StartTyping();
    }

    public static void Reset()
    {
        instances.Clear();
        
        lastTypingInstance = null;
    }
}
